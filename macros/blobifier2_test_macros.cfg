############################################################################################
[gcode_macro _BLOBIFIER_TEST_CONFIG]  # test different Blobifier config settings
############################################################################################
 
# Grubby config hack. There is no error checking so use carefully
# e.g. _BLOBIFIER_TEST_CONFIG VARIABLE="static_park" VALUE="[229.5, 1.3]"
#      _BLOBIFIER_TEST_CONFIG VARIABLE="purge_x" VALUE="295"
 
gcode:
   {% set variable = params.VARIABLE|string|default("") %}
   {% set value    = params.VALUE|string|default("") %}
 
   {% if value != "" and variable !=  "" %}
      SET_GCODE_VARIABLE MACRO=BLOBIFIER VARIABLE={variable} VALUE={value | pprint | replace("\n", "") | replace("\"", "\\\"")} 
      M118 SET_GCODE_VARIABLE MACRO=BLOBIFIER VARIABLE={variable} VALUE={value | pprint | replace("\n", "") | replace("\"", "\\\"")} 

   {% else %}
      {% set out = [] %}
      {% for key1 in printer %}
         {% for key2 in printer[key1] %}
            {% if (not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and ("blobifier" in key1|lower or "blobifier" in key2|lower) %}
               {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% endfor %}
      {% endfor %}
      {action_respond_info(out|join("\n"))}
   {% endif %}
 
   
############################################################################################
[gcode_macro _BLOBIFIER_TEST]  # test different Blobifier config settings
############################################################################################
 
# Grubby config hack. There is no error checking so use carefully
# e.g. _BLOBIFIER_TEST_CONFIG VARIABLE="static_park" VALUE="[229.5, 1.3]"
#      _BLOBIFIER_TEST_CONFIG VARIABLE="purge_x" VALUE="295"
 
gcode:
   M104 S255
   _CG28 
   {% if printer.quad_gantry_level.applied == False %}
      QUAD_GANTRY_LEVEL
   {% endif %}
 
   _SETHOTENDTEMP TARGET=255
   MMU_PARK force_park=1
   ;T0
   BLOBIFIER PURGE_LENGTH=20  # blob with default configuration
 
   _BLOBIFIER_TEST_CONFIG VARIABLE=gantry_park VALUE="-1"
   _BLOBIFIER_TEST_CONFIG VARIABLE=gantry_wiper VALUE="[-1, 39, 1.4, 1, 1]"
   MMU_PARK force_park=1
   ;T1
   BLOBIFIER PURGE_LENGTH=20  # blob with static configuration
 
   _BLOBIFIER_TEST_CONFIG VARIABLE=static_park VALUE="[-1, 1.3]"
   _BLOBIFIER_TEST_CONFIG VARIABLE=static_wiper VALUE="[-1, 39, 1.2, 1, 1]"
   MMU_PARK force_park=1
   ;T4
   BLOBIFIER PURGE_LENGTH=20  # blob with only tray
 
   _BLOBIFIER_TEST_CONFIG VARIABLE=gantry_park VALUE="121.6"
   _BLOBIFIER_TEST_CONFIG VARIABLE=gantry_wiper VALUE="[126, 42, 0, 3]"
   _BLOBIFIER_TEST_CONFIG VARIABLE=static_park VALUE="[229.5, 1.3]"
   _BLOBIFIER_TEST_CONFIG VARIABLE=static_wiper VALUE="[234, 39, 1.2, 1, 1]"
   M104 S0
   MMU_PARK force_park=1


############################################################################################
[gcode_macro _BLOBIFIER_TEST_LH]  # test different Blobifier config settings
############################################################################################
gcode:
   _BLOBIFIER_TEST_CONFIG variable=clearance_z value=20
   _BLOBIFIER_TEST_CONFIG variable=tray_top value=20
   _BLOBIFIER_TEST_CONFIG variable=purge_x value=40
   _BLOBIFIER_TEST_CONFIG variable=static_park value="[90, 20.3]"
   _BLOBIFIER_TEST_CONFIG variable=static_wiper value="[50, 30, 20.2, 2, 1]"
   ;_BLOBIFIER_INIT
   _CG28 
   SET_GCODE_VARIABLE MACRO=BLOBIFIER VARIABLE=orientation VALUE=0
   _BLOBIFIER_TEST_CONFIG variable=static_wiper value="[50, 30, 20.2, 2, 1]"
   {% if printer.quad_gantry_level.applied == False %}
      QUAD_GANTRY_LEVEL
   {% endif %}


############################################################################################
[gcode_macro _BLOBIFIER_TEST_PARKING]  # test different Blobifier config settings
############################################################################################
gcode:
   _CG28 
   {% if printer.quad_gantry_level.applied == False %}
      QUAD_GANTRY_LEVEL
   {% endif %}
   M118 Testing RH gantry parking
   _BLOBIFIER_TEST_CONFIG variable=gantry_park value="121.6"
   _BLOBIFIER_TEST_CONFIG variable=gantry_wiper value="[126, 42, 2, 3]"
   G1 Z15
   G1 X300 Y1 F18000
   MMU_PARK
   G1 Y250 F18000
   G1 X300 Y150 F18000
   MMU_PARK
   G1 X1 Y1 F18000
   MMU_PARK
   G1 Y250 F18000
   G1 X1 Y150 F18000
   MMU_PARK
   G1 X150 Y150 F18000
   MMU_PARK
   G1 X80 F18000
   G1 Y310 F18000
   G1 X150 F18000
   MMU_PARK

   M118 Testing RH static parking
   _BLOBIFIER_TEST_CONFIG variable=gantry_park value="-1"
   _BLOBIFIER_TEST_CONFIG variable=gantry_wiper value="[-1]"
   G1 Z15
   G1 X300 Y1 F18000
   MMU_PARK
   G1 Z15
   G1 Y250 F18000
   G1 X300 Y150 F18000
   MMU_PARK
   G1 Z15
   G1 X1 Y1 F18000
   MMU_PARK
   G1 Z15
   G1 Y250 F18000
   G1 X1 Y150 F18000
   MMU_PARK
   G1 Z15
   G1 X150 Y150 F18000
   MMU_PARK

   M118 Testing RH tray parking
   _BLOBIFIER_TEST_CONFIG variable=static_park value="[-1, 1.3]"
   _BLOBIFIER_TEST_CONFIG variable=static_wiper value="[-1, 39, 1.2, 2, 1]"
   G1 Z15
   G1 X300 Y1 F18000
   MMU_PARK
   G1 Z15
   G1 X250 Y250 F18000
   G1 X300 Y150 F18000
   MMU_PARK
   G1 Z15
   G1 X1 Y1 F18000
   MMU_PARK
   G1 Z15
   G1 X250 Y250 F18000
   G1 X1 F200 F18000
   MMU_PARK
   G1 Z15
   G1 X150 Y150 F18000
   MMU_PARK
   G1 Z15

   _BLOBIFIER_TEST_CONFIG variable=gantry_park value="121.6"
   _BLOBIFIER_TEST_CONFIG variable=gantry_wiper value="[126, 42, 2, 3]"

   _BLOBIFIER_TEST_CONFIG variable=static_park value="[229.5, 1.3]"
   _BLOBIFIER_TEST_CONFIG variable=static_wiper value="[234, 39, 1.2, 2, 1]"

   MMU_PARK

[gcode_macro MOVE_AVOID_COORDINATE]
gcode:

  {% set start_x = params.START_X|default(300)|float %} ; Set the starting X coordinate
  {% set start_y = params.START_Y|default(120)|float %} ; Set the starting Y coordinate
  {% set avoid_x = 275 %} ; Set the X coordinate to avoid
  {% set avoid_y = 250 %} ; Set the Y coordinate to avoid
  {% set end_x = params.END_X|default(260)|float %} ; Set the ending X coordinate
  {% set end_y = params.END_Y|default(310)|float %} ; Set the ending Y coordinate
  {% set safe_distance = 37 %} ; Set the minimum safe distance to avoid the coordinate

  M118 0 G1 X{start_x} Y{start_y} F1500 ; Move to the starting position

  ; Calculate intermediate points to avoid the specific coordinate
  M118 if {avoid_x} > {start_x} and {avoid_y} > {start_y}
  M118 elif {avoid_x} < {start_x} and {avoid_y} < {start_y}

  {% if avoid_x > start_x %}
;  {% if avoid_x > start_x and avoid_y > start_y %}
    M118 1 G1 X{avoid_x - safe_distance} Y{avoid_y - safe_distance} F1500
    M118 1 G1 X{avoid_x + safe_distance} Y{avoid_y + safe_distance} F1500
;  {% elif avoid_x < start_x and avoid_y < start_y %}
  {% else %}

    M118 2 G1 X{avoid_x + safe_distance} Y{avoid_y + safe_distance} F1500
    M118 2 G1 X{avoid_x - safe_distance} Y{avoid_y - safe_distance} F1500
;  {% else %}
;    M118 Other
  {% endif %}
  M118 3 G1 X{end_x} Y{end_y} F1500 ; Move to the ending position

[gcode_macro CHECK_LINE_INTERSECTION]
gcode:
  {% set x1 = params.X1|default(300)|float %} ; Set the starting X coordinate of the line
  {% set y1 = params.Y1|default(200)|float %} ; Set the starting Y coordinate of the line
  {% set x2 = params.X2|default(250)|float %} ; Set the ending X coordinate of the line
  {% set y2 = params.Y2|default(310)|float %} ; Set the ending Y coordinate of the line
  {% set check_x = 250 %} ; Set the X coordinate to check
  {% set check_y = 275 %} ; Set the Y coordinate to check

  ; Calculate the slope of the line
  {% set slope = (y2 - y1) / (x2 - x1) if x2 != x1 else 'undefined' %}

  ; Check if the point is on the line
  {% if slope != 'undefined' and (check_y == y1 + slope * (check_x - x1)) %}
    RESPOND MSG="The point ({ check_x }, { check_y }) intersects with the line."
  {% elif slope == 'undefined' and check_x == x1 %}
    RESPOND MSG="The point ({ check_x }, { check_y }) intersects with the vertical line."
  {% else %}
    RESPOND MSG="The point ({ check_x }, { check_y }) does not intersect with the line."
  {% endif %}


[gcode_macro CHECK_LINES_INTERSECTION]
gcode:
  {% set x1 = params.X1|default(300)|float %} ; Set the starting X coordinate of the first line
  {% set y1 = params.Y1|default(200)|float %} ; Set the starting Y coordinate of the first line
  {% set x2 = params.X2|default(250)|float %} ; Set the ending X coordinate of the first line
  {% set y2 = params.Y2|default(310)|float %}
  {% set x3 = params.X1|default(275)|float %} ; Set the starting X coordinate of the first line
  {% set y3 = params.Y1|default(250)|float %} ; Set the starting Y coordinate of the first line
  {% set x4 = params.X2|default(300)|float %} ; Set the ending X coordinate of the first line
  {% set y4 = params.Y2|default(250)|float %}


  ; Calculate the direction of the lines
  {% set d1 = (x2 - x1) * (y3 - y4) - (y2 - y1) * (x3 - x4) %}
  {% set d2 = (x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4) %}
  {% set d3 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3) %}

  ; Check if lines intersect
  {% if d1 != 0 %}
    {% set ua = d2 / d1 %}
    {% set ub = d3 / d1 %}
    {% if 0 <= ua <= 1 and 0 <= ub <= 1 %}
      RESPOND MSG="The lines intersect at point ({ x1 + ua * (x2 - x1) }, { y1 + ua * (y2 - y1) })."
    {% else %}
      RESPOND MSG="The lines do not intersect."
    {% endif %}
  {% else %}
    RESPOND MSG="The lines are parallel or coincident."
  {% endif %}

[gcode_macro INTERSECT_BACK_OF_BUILD_PLATE]
gcode:
  {% set start_x = params.START_X|default(300)|float %} ; Set the starting X coordinate of the line
  {% set start_y = params.START_Y|default(150)|float %} ; Set the starting Y coordinate of the line
  {% set intersect_x = params.INTERSECT_X|default(275)|float %} ; Set the X coordinate of the intersecting point
  {% set intersect_y = params.INTERSECT_Y|default(200)|float %} ; Set the Y coordinate of the intersecting point
  {% set end_y = 310 %} ; Set the Y coordinate of the back of the build plate

  ; Calculate the slope of the line
  {% set slope = (intersect_y - start_y) / (intersect_x - start_x) %}

  ; Calculate the X coordinate where the line intersects with y = end_y
  {% set end_x = start_x + (end_y - start_y) / slope %}

  RESPOND MSG="The line starting at X = {start_x}, Y = {start_y} and passing through x = {intersect_x}, Y = {intersect_y} will intersects with the back of the build plate at X = { end_x }, Y = { end_y }"
